---
title: "More Functions"
---

## Defining and Calling Functions

- Below finish defining a function called `say_hi` that prints "Hi there!" when
  called. Part of the definition is already there. Just finish it where you see
  the word `CODE`
- After fixing it, execute the code block to define your function

```{python}
#| eval: false
def say_hi():
  CODE
```

```{python}
# Solution:
def say_hi():
    print("Hi there!")

```

- Call the `say_hi` function you defined above.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
say_hi()
```

## Function Arguments

- Define a function called `greet_by_name` that takes a `name` argument and
  prints "Welcome [name]" when called. Some of the function is already set up.
  Just put the rest in where you see the word `CODE`
- After fixing it, execute the code block to define your function

```{python}
#| eval: false
CODE greet_by_name(CODE):
  print("Welcome " + name)

```

```{python}
# Solution:
def greet_by_name(name):
  print("Welcome, " + name)

```

- Call the `greet_by_name` function with the argument "John".

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
greet_by_name("John")
```

## Default Arguments

- Define a function called `greet_with_default_name` that takes a `name`
  argument with a default value of "Guest" and prints "Hello [name] Nice to
  meet you." when called.
- After fixing it, execute the code block to define your function

```{python}
#| eval: false
def greet_with_default_name(CODE):
  print("Hello " + name +" Nice to meet you")
```

```{python}
# Solution:
def greet_with_default_name(name="Guest"):
  print("Hello, " + name + "! Nice to meet you.")
```

- Call the `greet_with_default_name` function with no argument.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
greet_with_default_name()
```

- Call the `greet_with_default_name` function with the argument "Sam".

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
greet_with_default_name("Sam")
```

## Return Values

- Define a function called `multiply_numbers` that takes two arguments `num1` and `num2`, multiplys them, and returns the result.
- After fixing it, execute the code block to define your function

```{python}
#| eval: false
def multiply_numbers(num1, num2):
  CODE
```

```{python}
# Solution:
def multiply_numbers(num1, num2):
    result = num1 * num2
    return result

```

- Call the `multiply_numbers` function with arguments 5 and 7, and store the result in a variable called `product_result`.
- Print out `product_result`

```{python}
#| eval: false
CODE = multiply_numbers(CODE, CODE)
print(CODE)
```

```{python}
# Solution:
multiply_result = multiply_numbers(5, 7)
print(multiply_result)
```

## Keyword Arguments

- Define a function called `introduce_person` that takes two arguments `name`
  and `age`, and prints "This is [name] they are [age] years old." when called.
  Just fill in the part where it says `CODE`
- After fixing it, execute the code block to define your function

```{python}
#| eval: false
def introduce_person(CODE):
  print("This is " + name + "they are " + str(age) + "years old")

```

```{python}
# Solution:
def introduce_person(name, age):
    print("This is " + name + " they are " + str(age) + " years old")

```

- Call the `introduce_person` function using keyword arguments with
  `name="Alice"` and `age=25`.

```{python}
#| eval: false
introduce_person(CODE)
```

```{python}
# Solution:
introduce_person(name="Alice", age=25)
```
