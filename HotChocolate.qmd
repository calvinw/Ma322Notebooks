---
title: " - Decision Trees"
---

## Introduction
We'll explore decision trees using a simple example: predicting whether a person will make a purchase based on weather conditions (humidity and wind). This example will help understand how decision trees work.

## Setting Up Our Helper Functions
First, we'll create some helper functions to make our trees easier to read and understand:

```{python}
def clean_tree_text(tree_text):
    # Dictionary of all replacements
    replacements = {
        "humid_high <= 0.50": "Normal Humidity?",
        "humid_high >  0.50": "High Humidity?",
        "humid_normal <= 0.50": "High Humidity?",
        "humid_normal >  0.50": "Normal Humidity?",
        "windy_windy <= 0.50": "Calm?",
        "windy_windy >  0.50": "Windy?",
        "windy_calm <= 0.50": "Windy?",
        "windy_calm >  0.50": "Calm?",
        "class:": ""
    }
    
    # Apply all replacements
    clean_text = tree_text
    for old, new in replacements.items():
        clean_text = clean_text.replace(old, new)
    
    return clean_text

def print_clean_tree(classifier, columns):
    tree_text = export_text(classifier, feature_names=list(columns))
    print("\nDecision Tree:")
    print(clean_tree_text(tree_text))

def print_tree(classifier, columns):
    tree_text = export_text(classifier, feature_names=list(columns))
    print("\nDecision Tree:")
    print(tree_text)
```

## The Training Data
Here's our training data - this is what we'll use to teach our decision tree how to make predictions:

```{python}
import pandas as pd
from sklearn.tree import DecisionTreeClassifier, export_text
from sklearn.metrics import confusion_matrix

# Data
train = pd.DataFrame({
    'humid': ['high', 'high', 'high', 'normal', 'normal', 'normal', 'high', 'high', 'normal', 'normal', 'normal', 'high'],
    'windy': ['windy', 'calm', 'calm', 'calm', 'calm', 'calm', 'windy', 'windy', 'windy', 'windy', 'windy', 'calm'],
    'buys': ['no', 'no', 'yes', 'yes', 'yes', 'no', 'no', 'no', 'yes', 'yes', 'yes', 'no']
})
print("Training Data - What we'll use to teach our decision tree:")
print(train)
```

## The Testing Data
This is our testing data - we'll use this to see how well our tree makes predictions on new data it hasn't seen before:

```{python}
test = pd.DataFrame({
    'humid': ['high', 'normal', 'high', 'normal', 'normal', 'normal', 'high', 'normal', 'normal'],
    'windy': ['calm', 'calm', 'calm', 'windy', 'windy', 'calm', 'calm', 'calm', 'calm'],
    'buys': ['no', 'yes', 'yes', 'yes', 'yes', 'no', 'no', 'yes', 'no']
})
print("Testing Data - We'll use this to test our tree's predictions:")
print(test)
```

## Model 1: Humidity Only Tree
Let's first try to predict buying behavior using only humidity:

```{python}
# First we get the training data X-variables (predicters)
X_train = pd.get_dummies(train[['humid']])

# Next we create a Decision Tree Classifier 
classifier = DecisionTreeClassifier()

# Next we fit the data (create our model) using the actuals 
classifier.fit(X_train, train['buys'])

# This part gets the testing data X-varables 
X_test = pd.get_dummies(test[['humid']])

# Now we use the classifer to predict on the testing data
predictions = classifier.predict(X_test)

print("Here's how our tree makes decisions based only on humidity:")
print_clean_tree(classifier, X_train.columns)

print("\nHere's the same tree in its technical format:")
print_tree(classifier, X_train.columns)

# Print confusion matrix
cm = confusion_matrix(test['buys'], predictions)
cm_df = pd.DataFrame(
    cm,
    index=['Actual: no', 'Actual: yes'],
    columns=['Predicted: no', 'Predicted: yes']
)
print("\nConfusion Matrix (Shows how well our predictions matched reality):")
print(cm_df)

# Print accuracy
correct=cm[0,0]+cm[1,1]
total=cm[0,0]+cm[1,1]+cm[1,0]+cm[0,1]
accuracy = correct/total
print("\nAccuracy: ")
print(accuracy)
```

## Model 2: Wind Only Tree
Now let's try predicting based only on wind conditions:

```{python}
# First we get the training data X-variables (predicters)
X_train = pd.get_dummies(train[['windy']])

# Next we create a Decision Tree Classifier 
classifier = DecisionTreeClassifier()

# Next we fit the data (create our model) using the actuals 
classifier.fit(X_train, train['buys'])

# This part gets the testing data X-varables 
X_test = pd.get_dummies(test[['windy']])

# Now we use the classifer to predict on the testing data
predictions = classifier.predict(X_test)

print("Here's how our tree makes decisions based only on wind:")
print_clean_tree(classifier, X_train.columns)

print("\nHere's the same tree in its technical format:")
print_tree(classifier, X_train.columns)

# Print confusion matrix
cm = confusion_matrix(test['buys'], predictions)
cm_df = pd.DataFrame(
    cm,
    index=['Actual: no', 'Actual: yes'],
    columns=['Predicted: no', 'Predicted: yes']
)
print("\nConfusion Matrix (Shows how well our predictions matched reality):")
print(cm_df)

# Print accuracy
correct=cm[0,0]+cm[1,1]
total=cm[0,0]+cm[1,1]+cm[1,0]+cm[0,1]
accuracy = correct/total
print("\nAccuracy: ")
print(accuracy)
```

## Model 3: Full Tree Using Both Humidity and Wind
Finally, let's use both humidity and wind conditions to make our predictions:

```{python}
# First we get the training data X-variables (predicters)
X_train = pd.get_dummies(train[['humid', 'windy']])

# Next we create a Decision Tree Classifier 
classifier = DecisionTreeClassifier()

# Next we fit the data (create our model) using the actuals 
classifier.fit(X_train, train['buys'])

# This part gets the testing data X-varables 
X_test = pd.get_dummies(test[['humid', 'windy']])

# Now we use the classifer to predict on the testing data
predictions = classifier.predict(X_test)

print("Here's how our tree makes decisions using both humidity and wind:")
print_clean_tree(classifier, X_train.columns)

print("\nHere's the same tree in its technical format:")
print_tree(classifier, X_train.columns)

# Print confusion matrix
cm = confusion_matrix(test['buys'], predictions)
cm_df = pd.DataFrame(
    cm,
    index=['Actual: no', 'Actual: yes'],
    columns=['Predicted: no', 'Predicted: yes']
)
print("\nConfusion Matrix (Shows how well our predictions matched reality):")
print(cm_df)

# Print accuracy
correct=cm[0,0]+cm[1,1]
total=cm[0,0]+cm[1,1]+cm[1,0]+cm[0,1]
accuracy = correct/total
print("\nAccuracy: ")
print(accuracy)
```

## Understanding the Results
For each model, we show:

1. The decision tree's rules in plain English
2. The technical version of the tree (for reference)
3. A confusion matrix showing:
   - How many times we correctly predicted "no purchase"
   - How many times we correctly predicted "yes purchase"
   - How many times we made mistakes
4. The accuracy (percentage of correct predictions)

The confusion matrix is read like this:
- Each row shows what actually happened
- Each column shows what we predicted
- The numbers show how many times each combination occurred

By comparing the three models, we can see:
1. How well humidity alone predicts buying behavior
2. How well wind conditions alone predict buying behavior
3. Whether using both weather features together improves our predictions
