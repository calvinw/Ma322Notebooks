---
title: "Strings in Python"
---

Strings are sequences of characters used to represent text data in Python. Here are some essential concepts related to strings:

## Defining Strings

You can define strings with single quotes, double quotes and even triple quotes.

Single quotes and double quotes work basically the same way.

### Single Quotes

Single quotes work fine for defining a string. This will print "Hello, World!" to the console.

```{python}
aString = 'Hello, World!'

print(aString)
```

### Double Quotes

Double quotes also work for defining a string and will print the same output as the single quotes example above.


```{python}
aString = "Hello, World!"

print(aString)
```

One of the nice things about having both single and double quotes is you can use one type to include the other type of quote inside your string.

### Quotes Inside A String

```{python}
aString = "Type the string 'Hello World' into a code cell."

print(aString)
```

This example uses double quotes to define the string, allowing single quotes to be included inside the string. This will print: `Type the string 'Hello World' into a code cell.`

### Triple Quotes (Multiline Strings)

Triple quotes allow you to define a string that spans multiple lines. This example will print the string with line breaks preserved.


```{python}
aString = """This is a
multiline
string."""

print(aString)
```

## Accessing Parts of a String (Indexing)

Strings in Python are indexed, so you can access individual characters or substrings using their position(s) in the string.


```{python}
aString = "Hello, I am from Spain"

# Prints 'H' - this accesses the first character of the string
print(aString[0])

# Prints 'e' - this accesses the second character of the string
print(aString[1])

# Prints 'n' - this accesses the last character of the string
print(aString[-1])

# Prints 'i' - this accesses the next to last character of the string
print(aString[-2])

# Prints 'from' - a substring using slicing from index 12 to 15 (one before 16)
print(aString[12:16])
```

## Concatenating Strings

You can join or concatenate two strings together using the + operator.

```{python}
aString1 = "Hello, "
aString2 = "World!"

# Prints 'Hello, World!' by joining the two strings
print(aString1 + aString2)
```

## Replicating Strings

You can repeat or replicate a string by using the * operator along with an integer value.

```{python}
aString = "Hello! " * 3

# Prints 'Hello! Hello! Hello! ' by repeating the string 3 times
print(aString)
```


## String Methods

Strings come with a variety of built-in methods that allow you to perform common operations on them.

### replace()

The replace() method allows you to replace a portion of the string with a new substring.

```{python}
aString = "Hello, World!"

# Replacing 'World' with 'Python'
newString = aString.replace("World", "Python")

print(newString)
```

### split()

The split() method splits the string into a list of substrings based on the specified separator (in this case, a comma).


```{python}
aString = "Hello,World,Python"

# Prints ['Hello', 'World', 'Python'] by splitting the string at commas
words = aString.split(',')

print(words)
```

### join()

The join() method is the opposite of split(). It joins the elements of a list into a single string, using the string it is called on as the separator.


```{python}
words = ['Hello', 'World', 'Python']

# Joining the list with ', '
aString = ', '.join(words)

print(aString)
```

## Length of a String

The len() function returns the length of a string, counting the number of characters it contains.

```{python}
aString = "Hello, World!"

# Prints 13, which is the length of the string
print(len(aString))
```

