---
title: "Two Products - Decision Trees"
---

## Introduction
We'll explore decision trees using a simple example: predicting which video game a person might prefer (MindCraft or AlienBetweenUs) based on their age and gender. This is a basic example to help understand how decision trees work.

## Setting Up Our Helper Functions
First, we'll create some helper functions to make our trees easier to read and understand:

```{python}
def clean_tree_text(tree_text):
    # Dictionary of all replacements
    replacements = {
        "gender_F <= 0.50": "Male?",
        "gender_F >  0.50": "Female?",
        "gender_M <= 0.50": "Female?",
        "gender_M >  0.50": "Male?",
        "age_Adult <= 0.50": "Young?",
        "age_Adult >  0.50": "Adult?",
        "age_Young <= 0.50": "Adult?",
        "age_Young >  0.50": "Young?",
        "class:": "prediction:"
    }
    
    # Apply all replacements
    clean_text = tree_text
    for old, new in replacements.items():
        clean_text = clean_text.replace(old, new)
    
    return clean_text

def print_clean_tree(classifier, columns):
    tree_text = export_text(classifier, feature_names=list(columns))
    print("\nDecision Tree:")
    print(clean_tree_text(tree_text))

def print_tree(classifier, columns):
    tree_text = export_text(classifier, feature_names=list(columns))
    print("\nDecision Tree:")
    print(tree_text)
```

## The Training Data
Here's our training data - this is what we'll use to teach our decision tree how to make predictions:

```{python}
import pandas as pd
from sklearn.tree import DecisionTreeClassifier, export_text
from sklearn.metrics import confusion_matrix

# Data
train = pd.DataFrame({
    'gender': ['F', 'M', 'F', 'F', 'M', 'M', 'F'],
    'age': ['Adult', 'Adult', 'Adult', 'Young', 'Young', 'Young', 'Young'],
    'product': ['MindCraft', 'MindCraft', 'MindCraft', 'MindCraft', 'AlienBetweenUs', 'AlienBetweenUs', 'MindCraft']
})
print("Training Data - What we'll use to teach our decision tree:")
print(train)
```

## The Testing Data
This is our testing data - we'll use this to see how well our tree makes predictions on new data it hasn't seen before:

```{python}
test = pd.DataFrame({
    'gender': ['F', 'F', 'F', 'F', 'M', 'M', 'F', 'F', 'M'],
    'age': ['Adult', 'Young', 'Adult', 'Young', 'Young', 'Young', 'Adult', 'Young', 'Adult'],
    'product': ['MindCraft', 'AlienBetweenUs', 'MindCraft', 'MindCraft', 'AlienBetweenUs', 'AlienBetweenUs', 'AlienBetweenUs', 'MindCraft', 'MindCraft']
})
print("Testing Data - We'll use this to test our tree's predictions:")
print(test)
```

## Model 1: Age Only Tree
Let's first try to predict game preference using only age. The code below 

```{python}
# This part trains the model on the training data
X_train = pd.get_dummies(train[['age']])
classifier = DecisionTreeClassifier()
classifier.fit(X_train, train['product'])

# This part makes predictions on the testing data 
X_test = pd.get_dummies(test[['age']])
predictions = classifier.predict(X_test)

print("Age Only Tree Predictions:")
print(predictions)

print("Here's how our tree makes decisions based only on age:")
print_clean_tree(classifier, X_train.columns)

print("\nHere's the same tree in its technical format:")
print_tree(classifier, X_train.columns)

# Print confusion matrix
cm = confusion_matrix(test['product'], predictions)
cm_df = pd.DataFrame(
    cm,
    index=['Actual: AlienBetweenUs', 'Actual: MindCraft'],
    columns=['Predicted: AlienBetweenUs', 'Predicted: MindCraft']
)
print("\nConfusion Matrix (Shows how well our predictions matched reality):")
print(cm_df)

# Print accuracy
correct=cm[0,0]+cm[1,1]
total=cm[0,0]+cm[1,1]+cm[1,0]+cm[0,1]
accuracy = correct/total
print("\nAccuracy: ")
print(accuracy)
```

## Model 2: Gender Only Tree
Now let's try predicting based only on gender:

```{python}
X_train = pd.get_dummies(train[['gender']])
X_test = pd.get_dummies(test[['gender']])
classifier = DecisionTreeClassifier()
classifier.fit(X_train, train['product'])
predictions = classifier.predict(X_test)

print("Here's how our tree makes decisions based only on gender:")
print_clean_tree(classifier, X_train.columns)

print("\nHere's the same tree in its technical format:")
print_tree(classifier, X_train.columns)

# Print confusion matrix
cm = confusion_matrix(test['product'], predictions)
cm_df = pd.DataFrame(
    cm,
    index=['Actual: AlienBetweenUs', 'Actual: MindCraft'],
    columns=['Predicted: AlienBetweenUs', 'Predicted: MindCraft']
)
print("\nConfusion Matrix (Shows how well our predictions matched reality):")
print(cm_df)

# Print accuracy
correct=cm[0,0]+cm[1,1]
total=cm[0,0]+cm[1,1]+cm[1,0]+cm[0,1]
accuracy = correct/total
print("\nAccuracy: ")
print(accuracy)
```

## Model 3: Full Tree Using Both Age and Gender
Finally, let's use both age and gender to make our predictions:

```{python}
X_train = pd.get_dummies(train[['age', 'gender']])
X_test = pd.get_dummies(test[['age', 'gender']])
classifier = DecisionTreeClassifier()
classifier.fit(X_train, train['product'])
predictions = classifier.predict(X_test)

print("Here's how our tree makes decisions using both age and gender:")
print_clean_tree(classifier, X_train.columns)

print("\nHere's the same tree in its technical format:")
print_tree(classifier, X_train.columns)

# Print confusion matrix
cm = confusion_matrix(test['product'], predictions)
cm_df = pd.DataFrame(
    cm,
    index=['Actual: AlienBetweenUs', 'Actual: MindCraft'],
    columns=['Predicted: AlienBetweenUs', 'Predicted: MindCraft']
)
print("\nConfusion Matrix (Shows how well our predictions matched reality):")
print(cm_df)

# Print accuracy
correct=cm[0,0]+cm[1,1]
total=cm[0,0]+cm[1,1]+cm[1,0]+cm[0,1]
accuracy = correct/total
print("\nAccuracy: ")
print(accuracy)
```

## Understanding the Results
For each model, we show:

1. The decision tree's rules in plain English
2. The technical version of the tree (for reference)
3. A confusion matrix showing:
- How many times we correctly predicted AlienBetweenUs
- How many times we correctly predicted MindCraft
- How many times we made mistakes
4. The accuracy (percentage of correct predictions)

The confusion matrix is read like this:

- Each row shows what actually happened
- Each column shows what we predicted
- The numbers show how many times each combination occurred

By comparing the three models, we can see:

1. How well age alone predicts game preference
2. How well gender alone predicts game preference
3. Whether using both features together improves our predictions
