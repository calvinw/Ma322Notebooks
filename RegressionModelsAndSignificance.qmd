---
title: "Regression Models and Signficance"
format: 
  revealjs:
    theme: simple
    transition: slide
    slide-number: true
---

## Significant ( $p < .05$ )

- There is a **significant** linear relationship between the $y$ and the $x$ 

- This means you **can use the regression equation** for predictions, provided the accuracy is good enough (see the standard error for this)

- Graphically this means **there is enough data and you are convinced where the trendline is**

- We say: _The model is significant_

## Not Significant ( $p \geq .05$ )

- There is **not a significant** linear relationship between the $y$ and the $x$ 

- This means you **can not use the regression equation** for predictions

- Graphically this means **there is not enough data or you are not convinced where the trendline is**

- We say: _The model is not significant_

##

```{python}
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random

np.random.seed(42)

def generate_data(slope, intercept, noise, n=75):  # Increased from 50 to 100 points
    x = np.linspace(0, 10, n)
    y = slope * x + intercept + np.random.normal(0, noise, n)
    return x, np.clip(y, 0, 10)  # Clip y values between 0 and 10

def create_plot(ax, x, y):
    sns.scatterplot(x=x, y=y, ax=ax, s=100)
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_xlim(0, 10)
    ax.set_ylim(0, 10)

# Set up the plot style
plt.style.use('default')  # Use default matplotlib style
sns.set_theme(style="whitegrid")  # Set seaborn theme

# Create a 2x3 grid of subplots
fig, axes = plt.subplots(2, 3, figsize=(15, 10))
fig.suptitle("Linear Relationships in Bivariate Data", fontsize=16)

# Define the plots
plots = [
    (1, 0, 1),      # Strong Positive Correlation
    (-1, 10, 1),    # Strong Negative Correlation
    (0.5, 2, 1),    # Moderate Positive Correlation
    (-0.5, 8, 2),   # Moderate Negative Correlation with increased scatter
    (0.2, 4, 2),    # Weak Positive Correlation
    (-0.2, 6, 2)    # Weak Negative Correlation
]

# Randomize the order of plots
random.shuffle(plots)

# Generate and plot data for each subplot
for (i, j), (slope, intercept, noise) in zip(np.ndindex(2, 3), plots):
    x, y = generate_data(slope, intercept, noise)
    create_plot(axes[i, j], x, y)

plt.tight_layout()
plt.show()
```
##

```{python}
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random

np.random.seed(34)

def generate_data(slope, intercept, noise, n=10):  # Increased from 50 to 100 points
    x = np.linspace(0, 10, n)
    y = slope * x + intercept + np.random.normal(0, noise, n)
    return x, np.clip(y, 0, 10)  # Clip y values between 0 and 10

def create_plot(ax, x, y):
    sns.scatterplot(x=x, y=y, ax=ax, s=100)
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_xlim(0, 10)
    ax.set_ylim(0, 10)

# Set up the plot style
plt.style.use('default')  # Use default matplotlib style
sns.set_theme(style="whitegrid")  # Set seaborn theme

# Create a 2x3 grid of subplots
fig, axes = plt.subplots(2, 3, figsize=(15, 10))
fig.suptitle("Linear Relationships in Bivariate Data", fontsize=16)

# Define the plots
plots = [
    (1, 0, 1),      # Strong Positive Correlation
    (-1, 10, 1),    # Strong Negative Correlation
    (0.5, 2, 1),    # Moderate Positive Correlation
    (-0.5, 8, 2),   # Moderate Negative Correlation with increased scatter
    (0.2, 4, 2),    # Weak Positive Correlation
    (-0.2, 6, 2)    # Weak Negative Correlation
]

# Randomize the order of plots
random.shuffle(plots)

# Generate and plot data for each subplot
for (i, j), (slope, intercept, noise) in zip(np.ndindex(2, 3), plots):
    x, y = generate_data(slope, intercept, noise)
    create_plot(axes[i, j], x, y)

plt.tight_layout()
plt.show()
```

##
```{python}
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random
from scipy import stats
import pandas as pd

np.random.seed(12)

def generate_data(slope, intercept, noise, n=4):
    x = np.linspace(0, 10, n)
    y = slope * x + intercept + np.random.normal(0, noise, n)
    return x, y

def create_plot(ax, x, y):
    sns.scatterplot(x=x, y=y, ax=ax, s=300)
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    
    x_min, x_max = min(x), max(x)
    y_min, y_max = min(y), max(y)
    x_padding = (x_max - x_min) * 0.1
    y_padding = (y_max - y_min) * 0.1
    ax.set_xlim(x_min - x_padding, x_max + x_padding)
    ax.set_ylim(y_min - y_padding, y_max + y_padding)

def calculate_p_value(x, y):
    slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
    return p_value

plt.style.use('default')
sns.set_theme(style="whitegrid")

fig, axes = plt.subplots(2, 3, figsize=(15, 10))
fig.suptitle("Linear Relationships in Bivariate Data (4 data points)", fontsize=16)

plots = [
    (1, 0, 1),
    (-1, 10, 1),
    (0.5, 2, 1),
    (-0.5, 8, 2),
    (0.2, 4, 2),
    (-0.2, 6, 2)
]

random.shuffle(plots)

datasets = []
p_values = []

for (i, j), (slope, intercept, noise) in zip(np.ndindex(2, 3), plots):
    x, y = generate_data(slope, intercept, noise)
    create_plot(axes[i, j], x, y)
    
    datasets.append(pd.DataFrame({'x': x, 'y': y}))
    p_values.append(calculate_p_value(x, y))

plt.tight_layout()
plt.show()

# Save datasets
for i, dataset in enumerate(datasets):
    dataset.to_csv(f'dataset_4points_{i+1}.csv', index=False)

# Print p-values
print("\nP-values for datasets with 4 data points:")
for i, p_value in enumerate(p_values):
    print(f"Dataset {i+1} p-value: {p_value:.4f}")
```

