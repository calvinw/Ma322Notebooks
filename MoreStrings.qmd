---
title: "More Strings"
execute:
    eval: false
---

## Defining Strings

__Problem__: Define a string variable called `aString` by using the string `Hello Cruel World` by using single quotes for the string. Print it.

```{python}
CODE
```
```{python}
# __SOLUTION__
aString = 'Hello Cruel World'
print(aString)
```

__Problem__: Define a string variable called `aString` by using the string `Goodbye Cruel World` by using double quotes for the string. Print it.


```{python}
CODE
```
```{python}
# __SOLUTION__
aString = "Hello Cruel World"
print(aString)
```

__Problem__: Define a multiline string variable called `aString` using `See you later alligator`

using triple quotes and put each word on a separate line like this:

```
See
you
later
alligator
```

```{python}
CODE
```
```{python}
# __SOLUTION__
aString = """
See
you
later
alligator
"""
print(aString)
```

## Accessing Parts of a String (Indexing)


__Problem__: Define a string variable called `aString` to be `"Hello there"`. and print the first character using index notation.

```{python}
aString = "Hello there"
CODE
```
```{python}
# __SOLUTION__
aString = "Hello there"
print(aString[0])
```

__Problem__: Define a string variable called `aString` to be `"Ma322 is the most fun, it is just unbelievable!"`, and print the last three characters.

```{python}
aString = "Ma322 is the most fun, it is just unbelievable!"
CODE
```
```{python}
# __SOLUTION__
aString = "Ma322 is the most fun, it is just unbelievable!"
print(aString[-3:])
```

## Concatenating Strings

__Problem__: Concatenate two strings, `"Welcome "` and `"to Ma322!"`, and print the result.

```{python}
CODE
```
```{python}
# __SOLUTION__
aString1 = "Welcome "
aString2 = "to Ma322!"
print(aString1+aString2)
```

## Replicating Strings

__Problem__: Create a string that repeats `"Coding is Fun!"` three times and print it.

```{python}
aString = "Coding is Fun!"
CODE
```
```{python}
# __SOLUTION__
aString = "Coding is Fun!"
print(3*aString)
```

## String Methods

__Problem__: Given the string `"The quick brown fox jumps over the lazy dog."`, replace `"lazy dog"` with `"energetic puppy"` using the `replace()` method and print the new string.

```{python}
original_string = "The quick brown fox jumps over the lazy dog."
new_string = original_string.replace(CODE, CODE)
CODE
```
```{python}
# __SOLUTION__
original_string = "The quick brown fox jumps over the lazy dog."
new_string = original_string.replace("lazy dog", "energetic puppy")
print(new_string)
```

__Problem__: Given the string `"book,pen,paper,notebook"`, split it into a list of substrings using the `split()` method and print the list.

```{python}
original_string = "book-pen-paper-notebook"
item_list = original_string.split(CODE)
CODE
```
```{python}
# __SOLUTION__
original_string = "book-pen-paper-notebook"
item_list = original_string.split('-')
print(item_list)
```

__Problem__: Given the list `['Python', 'is', 'awesome']`, join the elements into a single string using the `join()` method with `'xoxoxo'` as the separator, and print the resulting string.

```{python}
word_list = ['Python', 'is', 'awesome']
CODE
```
```{python}
# __SOLUTION__
word_list = ['Python', 'is', 'awesome']
result_string = 'xoxoxo'.join(word_list)
print(result_string)
```

## Length of a String

__Problem__: Given the string `"Learn Python today!"`, print its length using the `len()` function.

```{python}
my_string = "Learn Python today!"
CODE
```
```{python}
# __SOLUTION__
my_string = "Learn Python today!"
length = len(my_string)
print(length)
```
