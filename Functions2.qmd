---
title: "More Functions"
---

## Defining and Calling Functions

- Define a function called `say_hi` that prints "Hi there!" when called.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def say_hi():
    print("Hi there!")
```

- Call the `say_hi` function you defined above.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
say_hi()
```

- Define a function called `greet_with_name_and_time` that takes a `name` argument and prints "Good morning, [name]!".

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def greet_with_name_and_time(name):
    print("Good morning, " + name + "!")
```

- Call the `greet_with_name_and_time` function with the argument "Sarah".

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
greet_with_name_and_time("Sarah")
```

## Function Arguments

- Define a function called `greet_by_name` that takes a `name` argument and prints "Welcome, [name]!" when called.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def greet_by_name(name):
    print("Welcome, " + name + "!")
```

- Call the `greet_by_name` function with the argument "John".

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
greet_by_name("John")
```

- Define a function called `greet_with_name_and_age` that takes two arguments, `name` and `age`, and prints "[name] is [age] years old." when called.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def greet_with_name_and_age(name, age):
    print(name + " is " + str(age) + " years old.")
```

- Call the `greet_with_name_and_age` function with the arguments "Emma" and 28.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
greet_with_name_and_age("Emma", 28)
```

## Default Arguments

- Define a function called `greet_with_default_name` that takes a `name` argument with a default value of "Guest" and prints "Hello, [name]! Nice to meet you." when called.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def greet_with_default_name(name="Guest"):
    print("Hello, " + name + "! Nice to meet you.")
```

- Call the `greet_with_default_name` function without providing an argument.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
greet_with_default_name()
```

- Define a function called `greet_with_default_feeling_and_name` that takes a `feeling` argument with a default value of "Hello" and a `name` argument, and prints "[feeling], [name]!" when called.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def greet_with_default_feeling_and_name(feeling="Hello", name):
    print(feeling + ", " + name + "!")
```

- Call the `greet_with_default_feeling_and_name` function with the argument "Alice" and omit the `feeling` argument.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
greet_with_default_feeling_and_name("Alice")
```

## Return Values

- Define a function called `add_numbers` that takes two arguments `num1` and `num2`, adds them, and returns the result.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def add_numbers(num1, num2):
    result = num1 + num2
    return result
```

- Call the `add_numbers` function with arguments 5 and 7, and store the result in a variable called `sum_result`.
- Print out `sum_result`

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
sum_result = add_numbers(5, 7)
print(sum_result)
```

- Define a function called `calculate_area` that takes two arguments `length` and `width`, calculates the area of a rectangle (length * width), and returns the result.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def calculate_area(length, width):
    area = length * width
    return area
```

- Call the `calculate_area` function with arguments 3 and 5, and store the result in a variable called `rectangle_area`.
- Print out `rectangle_area`.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
rectangle_area = calculate_area(3, 5)
print(rectangle_area)
```

## Keyword Arguments

- Define a function called `introduce_person` that takes two arguments `name` and `age`, and prints "This is [name], they are [age] years old." when called.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def introduce_person(name, age):
    print("This is " + name + ", they are " + str(age) + " years old.")
```

- Call the `introduce_person` function using keyword arguments with `name="Alice"` and `age=25`.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
introduce_person(name="Alice", age=25)
```

- Define a function called `describe_student` that takes three arguments `name`, `age`, and `grade`, and prints "[name] is [age] years old and is in grade [grade]." when called.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
def describe_student(name, age, grade):
    print(name + " is " + str(age) + " years old and is in grade " + str(grade) + ".")
```

- Call the `describe_student` function using keyword arguments with `name="Bob"`, `age=12`, and `grade=6`.

```{python}
#| eval: false
CODE
```

```{python}
# Solution:
describe_student(name="Bob", age=12, grade=6)
```
