---
title: More Data Types 
execute:
    eval: false
---

__Problem__: 

- Assign a variable using `x = 1.2`
- Print out info on `x` using the `type` function

```{python}
CODE
```
```{python}
# __SOLUTION__
x = 1.2
print(type(x))
```

This should output `<class 'float'>` which means `float`

Let's look at string types:

__Problem__: 

- Assign a variable using `y = "hello"`
- Print out info on `y` using the `type` function

```{python}
CODE
```
```{python}
# __SOLUTION__
y = "hello"
print(type(y))
```
This should output `<class 'str'>` which means `string`

Let's look at boolean type:

__Problem__: 

- Assign a variable using `z = True`
- Print out info on `z` using the `type` function

```{python}
CODE
```
```{python}
# __SOLUTION__
z = True
print(type(z))
```

This should output `<class 'bool'>` which means `boolean`.

One conversion that is frequently used is from a string like "1.23" to a number 1.23.

With quotes around it, a number will be seen as a string:

__Problem__: 

- Define a variable `a = "1.23"`
- Print out the data type of `a` using the `type` function

```{python}
CODE
```
```{python}
# __SOLUTION__
a = "1.23"
type(a)
```

So if we want to change the string "1.23" to a number, we must use `float` to convert the string to a number:

__Problem__: 

- Define a variable `b` and use it to convert the variable `a` from above to a `float` 
- Print out the data type of `b` using the `type` function

```{python}
CODE
```
```{python}
# __SOLUTION__
b = float(a)
print(type(b))
```


Finally for the code below add a couple of `type` functions to display information about the variables:

__Problem__: 

- Print out info on `x` using the `type` function
- Print out info on `y` using the `type` function

```{python}
x = "1.23"
y = float(x)
CODE
```
```{python}
# __SOLUTION__
x = "1.23"
y = float(x)

print(type(x))
print(type(y))
```

`x` is a string since there are quotation marks so that makes it a string.
`y` is a float since it was converted to a float with `float`.

Once again, for the code below add a couple of `type` functions to display information about the variables.

__Problem__: 

- Print out info on `z` using the `type` function
- Print out info on `w` using the `type` function

```{python}
z = "True"
w = bool(z)
CODE
```
```{python}
# __SOLUTION__
z = "True"
w = bool(z)
print(type(z))
print(type(w))
```

`z` is a string since there are quotation marks so that makes it a string.
`w` is a boolean since it was converted to a boolean with `bool`.
