---
title: "Decision Trees"
format:
  html:
    code-fold: false
jupyter: python3
---

```{python}
#| echo: true
#| results: 'hide'
#| message: false
#| warning: false

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier, plot_tree, export_text
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score

# Set display options
pd.set_option('display.precision', 4)
np.set_printoptions(precision=4, suppress=True)

def print_tree_results(X, y, feature_name, classifier):
    print(f"\nDecision Tree based on {feature_name}:")
    
    # Get the text representation of the tree
    tree_text = export_text(classifier, feature_names=list(X.columns))
    
    # Replace default labels with more readable ones
    # Replace default labels with more readable ones
    replacements = {
        'gender_M <= 0.50': 'gender=F',
        'gender_M >  0.50': 'gender=M',
        'age_Young <= 0.50': 'age=Adult',
        'age_Young >  0.50': 'age=Young',
        'M <= 0.50': 'gender=F',
        'M >  0.50': 'gender=M',
        'Young <= 0.50': 'age=Adult',
        'Young >  0.50': 'age=Young'
    }
    
    for old, new in replacements.items():
        tree_text = tree_text.replace(old, new)
    
    print(tree_text)

    # Create a DataFrame with actual and predicted values
    results = pd.DataFrame({
        'Actual': y,
        'Predicted': classifier.predict(X)
    })
    print("Actual vs Predicted:")
    print(results)

    print(f"Accuracy: {accuracy_score(y, classifier.predict(X)):.2f}")
```

## Building a Decision Tree

```{python}
url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTFmRX4RW3PitgcJya0X2sRbSiD0J2t0oYewyhkkyWwR9i8NIaHiuQKrBtLlrwG9fzn4MvNOM92olnK/pub?gid=0&single=true&output=csv"
df = pd.read_csv(url)
```

Here is the original data

```{python}
print(df)
```

Let's sort it by gender:

```{python}
print(df.sort_values('gender'))
```

So if we split on gender here is what we would get:

```{python}

X = pd.get_dummies(df['gender'], drop_first=True)
y = df['product']

classifier = DecisionTreeClassifier()
classifier.fit(X, y)

print_tree_results(X, y, "Gender", classifier)
```
The tree above makes 1 mistake out of 7.

Let's sort it by age:

```{python}
print(df.sort_values('age'))
```

```{python}

# Encode 'age' column
X = pd.get_dummies(df['age'], drop_first=True)
y = df['product']

classifier = DecisionTreeClassifier()
classifier.fit(X, y)

print_tree_results(X, y, "Age", classifier)
```

The tree above makes 2 mistakes out of 7.

```{python}

# Encode both 'age' and 'gender' columns
X = pd.get_dummies(df[['age', 'gender']], drop_first=True)
y = df['product']

classifier = DecisionTreeClassifier()
classifier.fit(X, y)

print_tree_results(X, y, "Age and Gender", classifier)
```



